{"basic_builder": {"appname": "Splunk_TA_censys", "friendly_name": "Censys Add-on for Splunk", "version": "1.0.8", "author": "Censys, Inc.", "description": "The Censys Add-on for Splunk brings an outside-in perspective of organizations Internet-facing networks to security operations.", "theme": "#f07a35", "large_icon": "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", "small_icon": "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", "visible": true, "tab_version": "4.1.0", "tab_build_no": "0", "build_no": 11}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "censys:asm:logbook", "interval": "3600", "use_external_validation": true, "streaming_mode_xml": true, "name": "censys_asm_logbook", "title": "Censys ASM Logbook", "description": "The Logbook is a change log of activity related to your assets.", "type": "customized", "parameters": [{"name": "censys_asm_api_key", "label": "Censys ASM API Key", "help_string": "Get your API Key from the ASM Integrations page: https://app.censys.io/integrations", "required": true, "format_type": "password", "default_value": "", "placeholder": "Your API here", "type": "password", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "censys_asm_api_key", "title": "Censys ASM API Key", "description": "Get your API Key from the ASM Integrations page: https://app.censys.io/integrations", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": "Your API here"}], "code": "# encoding = utf-8\n\nimport json\nfrom typing import Optional\n\nimport requests\nfrom modinput_wrapper.base_modinput import BaseModInput\nfrom splunklib.modularinput.event_writer import EventWriter\nfrom splunklib.modularinput.validation_definition import ValidationDefinition\n\nfrom censys_asm import CensysAsmApi, validate_api_key\n\n\"\"\"\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n\"\"\"\n\"\"\"\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n\"\"\"\n\n\nclass CensysAsmLogbookApi(CensysAsmApi):\n    input_stanza: str\n\n    def __init__(self, helper: BaseModInput):\n        \"\"\"Initialize the CensysAsmLogbookApi class.\"\"\"\n        super().__init__(helper.get_arg(\"censys_asm_api_key\"), helper)\n        self.input_stanza: str = helper.get_input_stanza_names()\n\n    def get_logbook_cursor(self) -> Optional[str]:\n        \"\"\"Get the logbook cursor.\"\"\"\n        response = self._make_call(\"/v1/logbook-cursor\", \"POST\")\n        logbook_cursor = response.json().get(\"cursor\")\n        if logbook_cursor is None:\n            self.helper.log_error(\"Failed to get logbook cursor.\")\n            self.helper.log_debug(response.text)\n        return logbook_cursor\n\n    def get_logbook_cursor_check_point(\n        self, checkpoint_key_prefix: str = \"asm_logbook_cursor_\"\n    ):\n        \"\"\"Get the logbook cursor and set the check point.\"\"\"\n        checkpoint_key = checkpoint_key_prefix + self.input_stanza\n        cursor_state = self.helper.get_check_point(checkpoint_key)\n        if cursor_state is None:\n            self.helper.log_debug(\"Getting new logbook cursor...\")\n            cursor_state = self.get_logbook_cursor()\n            if cursor_state is not None:\n                self.helper.log_debug(\n                    f\"Setting check point: {checkpoint_key} to {cursor_state}\"\n                )\n                self.helper.save_check_point(checkpoint_key, cursor_state)\n        return cursor_state\n\n    def get_logbook_events(self, cursor: Optional[str] = None) -> dict:\n        \"\"\"Get the logbook events.\"\"\"\n        response = self._make_call(\"/v1/logbook\", \"GET\", parameters={\"cursor\": cursor})\n        return response.json()\n\n    def write_logbook_events(self, event_writer: EventWriter):\n        \"\"\"Write the logbook events.\"\"\"\n        cursor = self.get_logbook_cursor_check_point()\n\n        self.helper.log_debug(f\"Logbook cursor: {cursor}\")\n        self.helper.log_info(\n            f\"Pulling logbook events for input '{self.input_stanza}'...\"\n        )\n\n        output_index = self.helper.get_output_index()\n        input_type = self.helper.get_input_type()\n        sourcetype = self.helper.get_sourcetype()\n\n        end_of_events = False\n        while not end_of_events:\n            try:\n                res = self.get_logbook_events(cursor)\n            except requests.HTTPError as e:\n                self.helper.log_error(str(e))\n                break\n\n            logbook_events: list = res.get(\"events\", [])\n            self.helper.log_debug(f\"Adding {len(logbook_events)} logbook events\")\n\n            end_of_events: bool = res.get(\"endOfEvents\", False)\n            for logbook_event in logbook_events:\n                logbook_event[\"data_input_name\"] = self.input_stanza\n                event = self.helper.new_event(\n                    data=json.dumps(logbook_event),\n                    index=output_index,\n                    source=input_type,\n                    sourcetype=sourcetype,\n                )\n                event_writer.write_event(event)\n\n\ndef validate_input(helper: BaseModInput, definition: ValidationDefinition):\n    \"\"\"Validate the input stanza configurations.\"\"\"\n    censys_asm_api_key = definition.parameters.get(\"censys_asm_api_key\", None)\n    validate_api_key(helper, censys_asm_api_key)\n\n\ndef collect_events(helper: BaseModInput, ew: EventWriter):\n    \"\"\"Collect Censys ASM Logbook events.\"\"\"\n    logbook_api = CensysAsmLogbookApi(helper)\n    logbook_api.write_logbook_events(ew)\n", "customized_options": [], "uuid": "b425ab4c82364824954cbc8f0445602d", "sample_count": 0}]}, "field_extraction_builder": {"censys:asm:logbook": {"is_parsed": true, "data_format": "json"}}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http"}, "log_settings": {"log_level": "DEBUG"}}}, "sourcetype_builder": {"censys:asm:logbook": {"metadata": {"event_count": 0, "data_input_name": "censys_asm_logbook", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_started", "validation_id": "v_1651265188_41"}}